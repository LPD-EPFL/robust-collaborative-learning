# coding: utf-8
###
 # @file   labelflipping.py
 # @author John Stephan <john.stephan@epfl.ch>
 #
 # @section LICENSE
 #
 # Copyright © 2018-2021 École Polytechnique Fédérale de Lausanne (EPFL).
 # All rights reserved.
 #
 # @section DESCRIPTION
 #
 # Implementation of the attack introduced in the following paper:
 #   Zeyuan Allen-Zhu, Faeze Ebrahimian, Jerry Li, Dan Alistarh
 #   Byzantine-Resilient Non-Convex Stochastic Gradient Descent
###

import tools

import math
import torch

from . import register

# ---------------------------------------------------------------------------- #
# Attack implementation

def attack(grads_flipped, f_real, **kwargs):
  """ Generate the attack gradients.
  Args:
    grads_flipped Non-empty list of label-flipped gradients (i.e., these gradients correspond to gradients computed by honest workers but on label-flipped batches)
    f_real       Number of Byzantine gradients to generate
    ...          Ignored keyword-arguments
  Returns:
    Generated Byzantine gradients
  """
  # Fast path
  if f_real == 0:
    return list()

  # Generate the Byzantine gradient, as the average of the flipped gradients
  stacked_grads = torch.stack(grads_flipped)
  byz_grad = stacked_grads.mean(dim=0)

  # Return this Byzantine gradient 'f_real' times
  return [byz_grad] * f_real

def check(grads_flipped, f_real, **kwargs):
  """ Check parameter validity for this attack.
  Args:
    grads_flipped Non-empty list of label-flipped gradients (i.e., these gradients correspond to gradients computed by honest workers but on label-flipped batches)
    f_real       Number of Byzantine gradients to generate
    ...          Ignored keyword-arguments
  Returns:
    Whether the given parameters are valid for this attack
  """
  if not isinstance(grads_flipped, list) or len(grads_flipped) == 0:
    return f"Expected a non-empty list of label-flipped gradients, got {grads_flipped!r}"
  if not isinstance(f_real, int) or f_real < 0:
    return f"Expected a non-negative number of Byzantine gradients to generate, got {f_real!r}"

# ---------------------------------------------------------------------------- #
# Attack registration

# Register the attack
register("labelflipping", attack, check)
