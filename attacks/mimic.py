# coding: utf-8
###
 # @file   mimic.py
 # @author John Stephan <john.stephan@epfl.ch>
 #
 # @section LICENSE
 #
 # Copyright © 2018-2022 École Polytechnique Fédérale de Lausanne (EPFL).
 # All rights reserved.
 #
 # @section DESCRIPTION
 #
 # Naive Implementation of the attack introduced in the following paper:
 #   Sai Praneeth Karimireddy, Lie He, Martin Jaggi
 #   Byzantine-robust learning on heterogeneous datasets via bucketing
 # The attack mimics the first worker in every round
###

import tools
import math
import torch
from . import register

# ---------------------------------------------------------------------------- #
# Attack implementation

def attack(grad_honests, f_real, **kwargs):
  """ Generate the attack gradients.
  Args:
    grad_honests Non-empty list of honest gradients
    f_real       Number of Byzantine gradients to generate
    ...          Ignored keyword-arguments
  Returns:
    Generated Byzantine gradients
  """
  # Fast path
  if f_real == 0:
    return list()
  # Return the gradient of the first worker
  return [grad_honests[0]] * f_real

def check(grad_honests, f_real, **kwargs):
  """ Check parameter validity for this attack.
  Args:
    grad_honests Non-empty list of honest gradients
    f_real       Number of Byzantine gradients to generate
    ...          Ignored keyword-arguments
  Returns:
    Whether the given parameters are valid for this attack
  """
  if not isinstance(grad_honests, list) or len(grad_honests) == 0:
    return f"Expected a non-empty list of honest gradients, got {grad_honests!r}"
  if not isinstance(f_real, int) or f_real < 0:
    return f"Expected a non-negative number of Byzantine gradients to generate, got {f_real!r}"

# ---------------------------------------------------------------------------- #

# Register the attack
register("mimic", attack, check)
