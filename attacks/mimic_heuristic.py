# coding: utf-8
###
 # @file   mimic_heuristic.py
 # @author John Stephan <john.stephan@epfl.ch>
 #
 # @section LICENSE
 #
 # Copyright © 2018-2022 École Polytechnique Fédérale de Lausanne (EPFL).
 # All rights reserved.
 #
 # @section DESCRIPTION
 #
 # Implementation of the heuristic-based attack introduced in the following paper:
 #   Sai Praneeth Karimireddy, Lie He, Martin Jaggi
 #   Byzantine-robust learning on heterogeneous datasets via bucketing
###

import tools
import math
import torch
from . import register

# ---------------------------------------------------------------------------- #
# Attack implementation

def attack(grad_honests, f_real, current_step, z, mimic_learning_phase, **kwargs):
  """ Generate the attack gradients.
  Args:
    grad_honests            Non-empty list of honest gradients
    f_real                  Number of Byzantine gradients to generate
    current_step            Current time step of the learning
    z                       z in the heuristic
    mimic_learning_phase    Number of steps of the learning phase of the mimic heuristic
    ...                     Ignored keyword-arguments
  Returns:
    Generated Byzantine gradients
  """
  # Fast path
  if f_real == 0:
    return list()

  if current_step < mimic_learning_phase:
      #JS: Return the gradient of the first worker
      return [grad_honests[0]] * f_real

  current_max = None
  best_worker = None
  for i, grad in enumerate(grad_honests):
      dot_product = torch.dot(grad, z).norm().item()
      if current_max is None or dot_product > current_max:
          current_max = dot_product
          best_worker = i

  return [grad_honests[best_worker]] * f_real


def check(grad_honests, f_real, current_step, z, mimic_learning_phase, **kwargs):
  """ Check parameter validity for this attack.
  Args:
    grad_honests            Non-empty list of honest gradients
    f_real                  Number of Byzantine gradients to generate
    current_step            Current time step of the learning
    z                       z in the heuristic
    mimic_learning_phase    Number of steps of the learning phase of the mimic heuristic
    ...                     Ignored keyword-arguments
  Returns:
    Whether the given parameters are valid for this attack
  """
  if not isinstance(grad_honests, list) or len(grad_honests) == 0:
    return f"Expected a non-empty list of honest gradients, got {grad_honests!r}"
  if not isinstance(f_real, int) or f_real < 0:
    return f"Expected a non-negative number of Byzantine gradients to generate, got {f_real!r}"
  if not isinstance(mimic_learning_phase, int) or mimic_learning_phase < 0:
    return f"Expected a non-negative interger for the learning phase of the mimic heuristic, got {mimic_learning_phase!r}"

# ---------------------------------------------------------------------------- #

# Register the attack
register("mimic_heuristic", attack, check)
